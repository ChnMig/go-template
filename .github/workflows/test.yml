name: Test
on:
  push:
    branches: [ main, release ]
  pull_request:
    branches: [ main, release ]
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.25.x' ] # 会自动获取并使用当前最新的 Go 稳定版本
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 推荐：固定版本
    - name: Set up Go
      uses: actions/setup-go@v5 # 推荐：固定版本
      with:
        go-version: ${{ matrix.go-version }}
        # 启用 setup-go 的内置缓存，它会根据 go.sum 缓存 Go 模块
        # 通常这足以替代独立的 actions/cache 步骤
        cache-dependency-path: http-services/go.sum 
    # 配置 Go 模块代理（国内镜像加速）
    - name: Configure Go proxy for China
      run: |
        go env -w GO111MODULE=on
        go env -w GOPROXY=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,https://goproxy.io,direct
        go env -w GOSUMDB=sum.golang.google.cn
        echo "GOPROXY=$(go env GOPROXY)"
        echo "GOSUMDB=$(go env GOSUMDB)"
    # 注意：这里移除了原来独立的 actions/cache 步骤，因为 actions/setup-go 已内置缓存功能
    # 如果你坚持使用独立的 actions/cache，请确保了解其与 setup-go 内置缓存的交互
    - name: Download dependencies
      working-directory: ./http-services
      run: |
        go mod download
        go mod verify
    - name: Run go vet
      working-directory: ./http-services
      run: go vet ./...
    - name: Run tests
      working-directory: ./http-services
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    - name: Generate coverage report
      working-directory: ./http-services
      run: |
        go tool cover -func=coverage.out
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV # 将覆盖率保存到环境变量
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4 # 推荐：固定版本
      with:
        files: ./http-services/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Check coverage threshold
      working-directory: ./http-services
      run: |
        # 直接使用之前步骤保存的环境变量 COVERAGE
        CURRENT_COVERAGE="${{ env.COVERAGE }}"
        # 确保 COVERAGE 变量已设置，否则给个默认值并警告
        if [ -z "$CURRENT_COVERAGE" ]; then
          CURRENT_COVERAGE="0"
          echo "::warning::Coverage environment variable not found, defaulting to 0 for threshold check."
        fi
        echo "Checking coverage threshold: $CURRENT_COVERAGE%"
        # 使用 bc -l 进行浮点数比较
        if (( $(echo "$CURRENT_COVERAGE < 50" | bc -l) )); then
          echo "::warning::Test coverage is below 50% ($CURRENT_COVERAGE%)"
        fi
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 推荐：固定版本
    - name: Set up Go
      uses: actions/setup-go@v5 # 推荐：固定版本
      with:
        go-version: '1.25.x'
        cache-dependency-path: http-services/go.sum
    # 配置 Go 模块代理（国内镜像加速）
    - name: Configure Go proxy for China
      run: |
        go env -w GO111MODULE=on
        go env -w GOPROXY=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,https://goproxy.io,direct
        go env -w GOSUMDB=sum.golang.google.cn
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8 # 推荐：固定版本 (v8 是 golangci-lint-action 的最新稳定版)
      with:
        version: latest # 指定 golangci-lint 工具使用最新版本
        working-directory: http-services
        args: --timeout=5m
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 已经固定，很好
    - name: Set up Go
      uses: actions/setup-go@v5 # 已经固定，很好
      with:
        go-version: '1.25.x'
        cache-dependency-path: http-services/go.sum
    # 配置 Go 模块代理（国内镜像加速）
    - name: Configure Go proxy for China
      run: |
        go env -w GO111MODULE=on
        go env -w GOPROXY=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,https://goproxy.io,direct
        go env -w GOSUMDB=sum.golang.google.cn
    - name: Build
      working-directory: ./http-services
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        go build \
          -ldflags "-X main.Version=$VERSION -X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" \
          -o bin/http-services \
          .
    - name: Upload build artifact
      uses: actions/upload-artifact@v4 # 推荐：固定版本
      with:
        name: http-services-binary-${{ runner.os }}
        path: http-services/bin/http-services
        retention-days: 7